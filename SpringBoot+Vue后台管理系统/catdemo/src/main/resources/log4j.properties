# 定义输出级别和输出平台,控件台输出
log4j.rootLogger=debug, stdout, LOG_INFO, LOG_DEBUG, LOG_ERROR, LOG_ALL

# 设定stdout输出平台 org.apache.log4j.ConsoleAppender（控制台）
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
# org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#默认情况下是System.out,指定输出控制台-err为红色的提示
log4j.appender.stdout.Target=System.out

# 指定输入的格式对输出的内容进行格式化
# %p  输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# %d 输出日志时间点的日期或时间，
# %r 输出自应用启动到输出该log信息耗费的毫秒数
# %c 输出所属的类目，通常就是所在类的全名
# %t 输出产生该日志事件的线程名
# %l 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数
# %m 输出代码中指定的消息,产生的日志具体信息
# %n 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行
# %-5p的意思是日志级别输出左对齐，右边以空格填充，%5p的意思是日志级别输出右对齐
log4j.appender.stdout.layout.ConversionPattern =[%-5p][%d{yyyy-MM-dd HH:mm:ss,SSS}] [method:%l]%n[message:%m]%n


# ALL全部级别
# DailyRollingFileAppender按日期生成新文件,RollingFileAppender按log文件最大长度限度生成新文件
log4j.appender.LOG_ALL = org.apache.log4j.DailyRollingFileAppender
# 文件输出位置
log4j.appender.LOG_ALL.File = logs/all/catdemo_All.log
# 默认 Append true:是追加的,false:覆盖前面的
log4j.appender.LOG_ALL.Append = true
#指定输出的最低级别
log4j.appender.LOG_ALL.Threshold = ALL
# 指定文件输出的格式
log4j.appender.LOG_ALL.Encoding=UTF-8
log4j.appender.LOG_ALL.layout = org.apache.log4j.PatternLayout
log4j.appender.LOG_ALL.layout.ConversionPattern=[%-5p][%d{yyyy-MM-dd HH:mm:ss,SSS}] [method:%l]%n[message:%m]%n

### 输出info到 to D://logs/info.log ###
# DailyRollingFileAppender按日期生成新文件,RollingFileAppender按log文件最大长度限度生成新文件
log4j.appender.LOG_INFO = org.apache.log4j.DailyRollingFileAppender
# 文件输出位置
log4j.appender.LOG_INFO.File = logs/info/catdemo_INFO.log
# 默认 Append true:是追加的,false:覆盖前面的
log4j.appender.LOG_INFO.Append = true
#指定输出的最低级别
log4j.appender.LOG_INFO.Threshold = INFO
# 指定文件输出的格式
log4j.appender.LOG_INFO.Encoding=UTF-8
log4j.appender.LOG_INFO.layout = org.apache.log4j.PatternLayout
log4j.appender.LOG_INFO.layout.ConversionPattern=[%-5p][%d{yyyy-MM-dd HH:mm:ss,SSS}] [method:%l]%n[message:%m]%n


### 输出DEBUG 级别以上的日志###
# 文件大小到达指定尺寸的时候产生一个新的文件(# DailyRollingFileAppender按日期生成新文件,RollingFileAppender按log文件最大长度限度生成新文件)
log4j.appender.LOG_DEBUG=org.apache.log4j.RollingFileAppender
#指定输出的最低级别
log4j.appender.LOG_DEBUG.Threshold=DEBUG
# 指定默认值是true,意谓着所有的消息都会被立即输出。 fasle 不输出
log4j.appender.LOG_DEBUG.ImmediateFlush=true
# 文件输出位置
log4j.appender.LOG_DEBUG.file=logs/debug/catdemo_DEBUG.log
# 指定文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.LOG_DEBUG.MaxFileSize=128MB
# 指定文件保存的最多个数
log4j.appender.LOG_DEBUG.MaxBackupIndex=10
# 指定文件输出的格式
log4j.appender.LOG_DEBUG.Encoding=UTF-8
# org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
log4j.appender.LOG_DEBUG.layout=org.apache.log4j.PatternLayout
#指定输入的格式对输出的内容进行格式化
#%p  输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%d 输出日志时间点的日期或时间，
#%l 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数
#%m 输出代码中指定的消息,产生的日志具体信息
#%n 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行
log4j.appender.LOG_DEBUG.layout.ConversionPattern=[%-5p][%d{yyyy-MM-dd HH:mm:ss}][%l]%m%n


## 文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.LOG_ERROR=org.apache.log4j.RollingFileAppender
#指定输出的最低级别-保存日志取tomcat下logs目录
log4j.appender.LOG_ERROR.Threshold=error
# 指定默认值是true,意谓着所有的消息都会被立即输出。 fasle 不输出
log4j.appender.LOG_ERROR.ImmediateFlush=true
#默认情况下是System.out,指定输出控制台-err为红色的提示
log4j.appender.LOG_ERROR.File= logs/error/catdemo_ERROR.log
#指定文件的大小
log4j.appender.LOG_ERROR.MaxFileSize= 20480KB
# 指定最大文件个数
log4j.appender.LOG_ERROR.MaxBackupIndex= 10
# 指定文件输出的格式
log4j.appender.LOG_ERROR.Encoding=UTF-8
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
log4j.appender.LOG_ERROR.layout=org.apache.log4j.PatternLayout
#指定输入的格式对输出的内容进行格式化
#%p  输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%d 输出日志时间点的日期或时间，
#%l 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数
#%m 输出代码中指定的消息,产生的日志具体信息
#%n 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行
log4j.appender.LOG_ERROR.layout.ConversionPattern=[%-5p][%d{yyyy-MM-dd HH:mm:ss}][%l]%m%n

